#import "@preview/scripst:1.1.1": *

#let preface = [

  == 高等量子力学高等在哪里？

  本科学的量子力学是*非相对论量子力学*，而且可以再加一个定语“*单体*”。一般是先讲讲历史脉络，然后引入*波函数*以及波函数的演化方程，即*Schrödinger方程*。接下来用*一维问题*让你练练手，比如各种方势阱和谐振子，给你一点物理图像，不然你会蒙圈。然后告诉你在量子力学里面力学量是*Hermitian算符*，紧接着讲讲*表象理论*以及*对称性和守恒量*。接下来继续练手，求解中心力场和电磁场中的带电粒子，氢原子的结果解出来后，可能会让你觉得，量子力学果然有道理。接下来是引入*电子自旋*，然后给出*角动量的一般性定义*，同时引入了*力学量本征值问题的代数解法*。最后是*近似理论*，包括*定态微扰论*、*含时微扰论*和简单的*散射理论*。

  高等量子力学，何谓高等？
  - 在本科量子力学的基础上，学习更加完整和深刻的量子理论形式体系。
    - 学完本科量子力学以后，有的同学心目中的Schrödinger方程可能长这个样子
      $
        i hbar pdv(, t) psi(vb(r), t) = (- hbar^2/(2m) laplacian + V(vb(r))) psi(vb(r), t)
      $<Schrödinger0>
      但是实际上，更加深刻的Schrödinger方程是这个样子
      $
        i hbar pdv(, t) ket(psi(t)) = hat(H) ket(psi(t))
      $<Schrödinger1>
      方程 @Schrödinger1 在理论意义上比方程 @Schrödinger0 要高。
      - 方程 @Schrödinger0 仅仅是*一个非相对论粒子的波函数在外势场中的演化方程*，其适用范围非常有限，如果是相对论系统、多粒子系统和量子场论系统等，它就不适用了。
      - 方程 @Schrödinger1 就不一样了，它对*一切量子理论*都适用，包括量子多体系统、量子场论系统等。只不过，这些系统的Hamilton量怎么写，Hilbert空间怎么构造，就更加复杂了。也就是说，采用的*表象*将会比单粒子量子力学复杂得多。
    - 学完本科量子力学以后，有的同学可能认为量子力学的*动力学演化*只有一种形式，那就是刚才提到的*Schrödinger方程*。但是，当你参透了*幺正变换*的玄机以后，你就知道，量子动力学存在很多种不同的理论形式，这就是所谓的*绘景理论*。
    - 学完本科量子力学以后，有的同学可能认为*量子化*只有一种方式，即*正则量子化*：力学量变成Hermitian算符。但是，量子理论中还存在其他的量子化方式，比如*路径积分量子化*，其中根本不出现算符。
    *表象、绘景和量子化*是量子理论形式体系的基本内容，高等量子力学的前几章就是讲述这三个方面。（更深入的内容：对称性、相位因子等）
  - 本科学的量子力学主要是单粒子的非相对论量子力学，主要是求解Schrödinger方程，顶多再附加一个自旋，能处理的问题很少。要处理更多的量子系统，我们需要进行拓展。
    - 在*量子动力学*方面，我们要学习不同的绘景，学习路径积分方法，学习密度矩阵及其演化方程。
    - 为了处理全同粒子构成的*多粒子体系*，我们需要学习二次量子化。尤其是，为了深入研究光的量子理论，二次量子化是必要的。
    - 为了处理*相对论性粒子*的量子理论，我们需要学习 Dirac 方程，为进一步学习量子场论打下基础。

  == 课程内容
  - 量子力学的抽象形式、表象理论
  - 量子动力学：绘景理论、密度矩阵、绝热演化等
  - 量子化：路径积分量子化、约束系统的量子化等
  - 量子测量、多粒子系统的纠缠态等
  - 角动量理论
  - 对称性理论
  - 近似方法
  - 量子散射理论
  - 全同粒子系统的二次量子化
  - 相对论量子力学和 Dirac 方程
]

#show: scripst.with(
  template: "book",
  title: [高等量子力学],
  author: ("Anzreww",),
  time: "乙巳秋冬于清华园",
  contents: true,
  content-depth: 3,
  matheq-depth: 3,
  lang: "zh",
  preface: preface,
)

#include "chap1.typ"

#pagebreak()

#include "chap2.typ"
